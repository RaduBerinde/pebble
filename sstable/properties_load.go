// Autogenerated - DO NOT EDIT

package sstable

import (
	"bytes"
	"encoding/binary"

	"github.com/cockroachdb/pebble/internal/intern"
)

// loadField loads the value of the field with the given tag and updates the
// loaded fields map.
//
// If the tag does not correspond to a field, returns false.
func (p *Properties) loadField(tag string, value []byte, loaded map[uintptr]struct{}) bool {
	switch tag {
	case "rocksdb.num.entries":
		p.NumEntries, _ = binary.Uvarint(value)
		loaded[0] = struct{}{}

	case "rocksdb.raw.key.size":
		p.RawKeySize, _ = binary.Uvarint(value)
		loaded[8] = struct{}{}

	case "rocksdb.raw.value.size":
		p.RawValueSize, _ = binary.Uvarint(value)
		loaded[16] = struct{}{}

	case "pebble.raw.point-tombstone.key.size":
		p.RawPointTombstoneKeySize, _ = binary.Uvarint(value)
		loaded[24] = struct{}{}

	case "pebble.raw.point-tombstone.value.size":
		p.RawPointTombstoneValueSize, _ = binary.Uvarint(value)
		loaded[32] = struct{}{}

	case "pebble.num.deletions.sized":
		p.NumSizedDeletions, _ = binary.Uvarint(value)
		loaded[40] = struct{}{}

	case "rocksdb.deleted.keys":
		p.NumDeletions, _ = binary.Uvarint(value)
		loaded[48] = struct{}{}

	case "rocksdb.num.range-deletions":
		p.NumRangeDeletions, _ = binary.Uvarint(value)
		loaded[56] = struct{}{}

	case "pebble.num.range-key-dels":
		p.NumRangeKeyDels, _ = binary.Uvarint(value)
		loaded[64] = struct{}{}

	case "pebble.num.range-key-sets":
		p.NumRangeKeySets, _ = binary.Uvarint(value)
		loaded[72] = struct{}{}

	case "pebble.value-blocks.size":
		p.ValueBlocksSize, _ = binary.Uvarint(value)
		loaded[80] = struct{}{}

	case "rocksdb.comparator":
		p.ComparerName = intern.Bytes(value)
		loaded[88] = struct{}{}

	case "rocksdb.compression":
		p.CompressionName = intern.Bytes(value)
		loaded[104] = struct{}{}

	case "rocksdb.compression_options":
		p.CompressionOptions = intern.Bytes(value)
		loaded[120] = struct{}{}

	case "rocksdb.data.size":
		p.DataSize, _ = binary.Uvarint(value)
		loaded[136] = struct{}{}

	case "rocksdb.external_sst_file.version":
		p.ExternalFormatVersion = binary.LittleEndian.Uint32(value)
		loaded[144] = struct{}{}

	case "rocksdb.filter.policy":
		p.FilterPolicyName = intern.Bytes(value)
		loaded[152] = struct{}{}

	case "rocksdb.filter.size":
		p.FilterSize, _ = binary.Uvarint(value)
		loaded[168] = struct{}{}

	case "rocksdb.external_sst_file.global_seqno":
		p.GlobalSeqNum = binary.LittleEndian.Uint64(value)
		loaded[176] = struct{}{}

	case "rocksdb.index.partitions":
		p.IndexPartitions, _ = binary.Uvarint(value)
		loaded[184] = struct{}{}

	case "rocksdb.index.size":
		p.IndexSize, _ = binary.Uvarint(value)
		loaded[192] = struct{}{}

	case "rocksdb.block.based.table.index.type":
		p.IndexType = binary.LittleEndian.Uint32(value)
		loaded[200] = struct{}{}

	case "pebble.obsolete.is_strict":
		p.IsStrictObsolete = bytes.Equal(value, propBoolTrue)
		loaded[204] = struct{}{}

	case "rocksdb.merge.operator":
		p.MergerName = intern.Bytes(value)
		loaded[208] = struct{}{}

	case "rocksdb.num.data.blocks":
		p.NumDataBlocks, _ = binary.Uvarint(value)
		loaded[224] = struct{}{}

	case "rocksdb.merge.operands":
		p.NumMergeOperands, _ = binary.Uvarint(value)
		loaded[232] = struct{}{}

	case "pebble.num.range-key-unsets":
		p.NumRangeKeyUnsets, _ = binary.Uvarint(value)
		loaded[240] = struct{}{}

	case "pebble.num.value-blocks":
		p.NumValueBlocks, _ = binary.Uvarint(value)
		loaded[248] = struct{}{}

	case "pebble.num.values.in.value-blocks":
		p.NumValuesInValueBlocks, _ = binary.Uvarint(value)
		loaded[256] = struct{}{}

	case "rocksdb.prefix.extractor.name":
		p.PrefixExtractorName = intern.Bytes(value)
		loaded[264] = struct{}{}

	case "rocksdb.block.based.table.prefix.filtering":
		p.PrefixFiltering = bytes.Equal(value, propBoolTrue)
		loaded[280] = struct{}{}

	case "rocksdb.property.collectors":
		p.PropertyCollectorNames = intern.Bytes(value)
		loaded[288] = struct{}{}

	case "pebble.raw.range-key.key.size":
		p.RawRangeKeyKeySize, _ = binary.Uvarint(value)
		loaded[304] = struct{}{}

	case "pebble.raw.range-key.value.size":
		p.RawRangeKeyValueSize, _ = binary.Uvarint(value)
		loaded[312] = struct{}{}

	case "pebble.num.snapshot-pinned-keys":
		p.SnapshotPinnedKeys, _ = binary.Uvarint(value)
		loaded[320] = struct{}{}

	case "pebble.raw.snapshot-pinned-keys.size":
		p.SnapshotPinnedKeySize, _ = binary.Uvarint(value)
		loaded[328] = struct{}{}

	case "pebble.raw.snapshot-pinned-values.size":
		p.SnapshotPinnedValueSize, _ = binary.Uvarint(value)
		loaded[336] = struct{}{}

	case "rocksdb.top-level.index.size":
		p.TopLevelIndexSize, _ = binary.Uvarint(value)
		loaded[344] = struct{}{}

	case "rocksdb.block.based.table.whole.key.filtering":
		p.WholeKeyFiltering = bytes.Equal(value, propBoolTrue)
		loaded[360] = struct{}{}

	default:
		return false
	}

	return true
}

// propOffsetTagMap maps offset inside struct to tag.
var propOffsetTagMap = map[uintptr]string{
	0:   "rocksdb.num.entries",
	8:   "rocksdb.raw.key.size",
	16:  "rocksdb.raw.value.size",
	24:  "pebble.raw.point-tombstone.key.size",
	32:  "pebble.raw.point-tombstone.value.size",
	40:  "pebble.num.deletions.sized",
	48:  "rocksdb.deleted.keys",
	56:  "rocksdb.num.range-deletions",
	64:  "pebble.num.range-key-dels",
	72:  "pebble.num.range-key-sets",
	80:  "pebble.value-blocks.size",
	88:  "rocksdb.comparator",
	104: "rocksdb.compression",
	120: "rocksdb.compression_options",
	136: "rocksdb.data.size",
	144: "rocksdb.external_sst_file.version",
	152: "rocksdb.filter.policy",
	168: "rocksdb.filter.size",
	176: "rocksdb.external_sst_file.global_seqno",
	184: "rocksdb.index.partitions",
	192: "rocksdb.index.size",
	200: "rocksdb.block.based.table.index.type",
	204: "pebble.obsolete.is_strict",
	208: "rocksdb.merge.operator",
	224: "rocksdb.num.data.blocks",
	232: "rocksdb.merge.operands",
	240: "pebble.num.range-key-unsets",
	248: "pebble.num.value-blocks",
	256: "pebble.num.values.in.value-blocks",
	264: "rocksdb.prefix.extractor.name",
	280: "rocksdb.block.based.table.prefix.filtering",
	288: "rocksdb.property.collectors",
	304: "pebble.raw.range-key.key.size",
	312: "pebble.raw.range-key.value.size",
	320: "pebble.num.snapshot-pinned-keys",
	328: "pebble.raw.snapshot-pinned-keys.size",
	336: "pebble.raw.snapshot-pinned-values.size",
	344: "rocksdb.top-level.index.size",
	360: "rocksdb.block.based.table.whole.key.filtering",
}
